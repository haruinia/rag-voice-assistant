const express = require('express');
const neo4j = require('neo4j-driver');
const router = express.Router();

// 创建 Neo4j 驱动
const driver = neo4j.driver('bolt://localhost:7687', neo4j.auth.basic('neo4j', 'neo4j'));
const session = driver.session();

// 定义 API 端点
router.get('/', async (req, res) => {
    try {
        // 查询所有节点及其关系
        const result = await session.run(`
            MATCH (n)
            OPTIONAL MATCH (n)-[r]->(m)
            RETURN n, r, m
            LIMIT 25
        `);

        // 处理结果
        const records = result.records.map(record => ({
            node1: record.get('n').properties,
            relationship: record.get('r') ? record.get('r').type : null,
            node2: record.get('m') ? record.get('m').properties : null
        }));
        res.json(records);
        console.log(records)
    } catch (error) {
        console.error('Error querying Neo4j', error);
        res.status(500).send(error);
    }
});

router.get('/:nodeName', async (req, res) => {
    const nodeName = req.params.nodeName;
    console.log('输入的节点名称：'+nodeName)
    try {
        const result = await session.run(
            `
             MATCH (n {name: $nodeName})
            OPTIONAL MATCH (n)-[r]->(m)
            RETURN n, r, m
            
            `,
            { nodeName }
        );
        const records = result.records.map(record => ({
            node1: record.get('n').properties,
            relationship: record.get('r').type,
            node2: record.get('m') ? record.get('m').properties : null
        }));
        res.json(records);

    } catch (error) {
        console.error('Error querying Neo4j，没有信息', error);
        res.status(500).send(error);
    }
});

//api接口,同理找到某节点的父节点.
router.get('/parents/:nodeName', async (req, res) => {
    const nodeName = req.params.nodeName;
    try {
        const result = await session.run(`
            // MATCH (n)<-[r]-(m {name: $nodeName})
            // RETURN n, r, m
            MATCH (n {name: $nodeName})<-[r]-(m)
            RETURN n, r, m
        `, { nodeName });

        const records = result.records.map(record => ({
            node1: record.get('m').properties,
            relationship: record.get('r') ? record.get('r').type : null,
            node2: record.get('n').properties
        }));
        res.json(records);
    } catch (error) {
        console.error('Error querying Neo4j', error);
        res.status(500).send(error);
    }
});


module.exports = router;
