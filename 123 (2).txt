<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>文物领域智能语音助手</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: #000;
      color: #fff;
      height: 100vh;
      overflow: hidden;
    }

    #app {
      height: 100vh;
      display: flex;
      flex-direction: column;
      position: relative;
    }

    /* 动态背景 */
    .dynamic-background {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 0;
      background: #000;
      overflow: hidden;
    }

    .bg-gradient {
      position: absolute;
      width: 150%;
      height: 150%;
      top: -25%;
      left: -25%;
      background: radial-gradient(circle at 30% 40%, rgba(59, 130, 246, 0.3), transparent 50%),
                  radial-gradient(circle at 70% 60%, rgba(139, 92, 246, 0.3), transparent 50%),
                  radial-gradient(circle at 50% 50%, rgba(34, 197, 94, 0.2), transparent 70%);
      animation: gradientShift 20s ease-in-out infinite;
    }

    @keyframes gradientShift {
      0%, 100% { transform: rotate(0deg) scale(1); }
      33% { transform: rotate(120deg) scale(1.1); }
      66% { transform: rotate(240deg) scale(0.9); }
    }

    /* 顶部栏 */
    .top-bar {
      position: relative;
      z-index: 10;
      padding: 20px 30px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      background: rgba(0, 0, 0, 0.3);
      backdrop-filter: blur(10px);
    }

    .app-title {
      font-size: 20px;
      font-weight: 600;
      opacity: 0.9;
    }

    .top-actions {
      display: flex;
      gap: 15px;
    }

    .action-btn {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: rgba(255, 255, 255, 0.8);
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.3s ease;
    }

    .action-btn:hover {
      background: rgba(255, 255, 255, 0.2);
      transform: scale(1.05);
    }

    .action-btn.active {
      background: rgba(59, 130, 246, 0.3);
      color: #3b82f6;
      border-color: rgba(59, 130, 246, 0.5);
    }

    /* 主要语音助手区域 */
    .voice-assistant-container {
      flex: 1;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      position: relative;
      z-index: 5;
    }

    /* 语音助手动画 */
    .voice-orb {
      position: relative;
      width: 200px;
      height: 200px;
      margin-bottom: 40px;
    }

    .orb-core {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 120px;
      height: 120px;
      background: radial-gradient(circle at 30% 30%, rgba(255, 255, 255, 0.3), transparent),
                  linear-gradient(135deg, #1e293b, #334155);
      border-radius: 50%;
      box-shadow: 0 0 60px rgba(59, 130, 246, 0.4),
                  inset 0 0 30px rgba(0, 0, 0, 0.3);
      transition: all 0.3s ease;
    }

    .orb-core.listening {
      background: radial-gradient(circle at 30% 30%, rgba(255, 255, 255, 0.4), transparent),
                  linear-gradient(135deg, #3b82f6, #2563eb);
      box-shadow: 0 0 80px rgba(59, 130, 246, 0.6),
                  inset 0 0 30px rgba(0, 0, 0, 0.2);
    }

    .orb-core.speaking {
      background: radial-gradient(circle at 30% 30%, rgba(255, 255, 255, 0.4), transparent),
                  linear-gradient(135deg, #22c55e, #16a34a);
      box-shadow: 0 0 80px rgba(34, 197, 94, 0.6),
                  inset 0 0 30px rgba(0, 0, 0, 0.2);
    }

    .orb-core.thinking {
      background: radial-gradient(circle at 30% 30%, rgba(255, 255, 255, 0.4), transparent),
                  linear-gradient(135deg, #8b5cf6, #7c3aed);
      box-shadow: 0 0 80px rgba(139, 92, 246, 0.6),
                  inset 0 0 30px rgba(0, 0, 0, 0.2);
    }

    /* 语音波纹 */
    .voice-wave {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 100%;
      height: 100%;
      border-radius: 50%;
      pointer-events: none;
    }

    .wave-ring {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 120px;
      height: 120px;
      border: 2px solid rgba(255, 255, 255, 0.2);
      border-radius: 50%;
      opacity: 0;
    }

    .listening .wave-ring {
      animation: waveExpand 2s ease-out infinite;
      border-color: rgba(59, 130, 246, 0.6);
    }

    .speaking .wave-ring {
      animation: waveExpand 1.5s ease-out infinite;
      border-color: rgba(34, 197, 94, 0.6);
    }

    .wave-ring:nth-child(1) { animation-delay: 0s; }
    .wave-ring:nth-child(2) { animation-delay: 0.5s; }
    .wave-ring:nth-child(3) { animation-delay: 1s; }

    @keyframes waveExpand {
      0% {
        width: 120px;
        height: 120px;
        opacity: 1;
      }
      100% {
        width: 300px;
        height: 300px;
        opacity: 0;
      }
    }

    /* 频谱可视化 */
    .spectrum-visualizer {
      position: absolute;
      bottom: -60px;
      left: 50%;
      transform: translateX(-50%);
      width: 300px;
      height: 80px;
      display: flex;
      align-items: flex-end;
      justify-content: center;
      gap: 4px;
      opacity: 0;
      transition: opacity 0.3s ease;
    }

    .spectrum-visualizer.active {
      opacity: 1;
    }

    .spectrum-bar {
      width: 4px;
      background: linear-gradient(to top, rgba(59, 130, 246, 0.8), rgba(139, 92, 246, 0.8));
      border-radius: 2px;
      transform-origin: bottom;
      transition: height 0.1s ease;
    }

    /* 状态文字 */
    .status-text {
      margin-top: 80px;
      font-size: 18px;
      color: rgba(255, 255, 255, 0.8);
      text-align: center;
      min-height: 30px;
    }

    /* 主控制按钮 */
    .main-control {
      margin-top: 40px;
      display: flex;
      align-items: center;
      gap: 20px;
    }

    .voice-button {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.1);
      border: 2px solid rgba(255, 255, 255, 0.3);
      color: #fff;
      font-size: 32px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.3s ease;
      backdrop-filter: blur(10px);
    }

    .voice-button:hover {
      background: rgba(255, 255, 255, 0.2);
      transform: scale(1.05);
    }

    .voice-button.active {
      background: rgba(239, 68, 68, 0.8);
      border-color: #ef4444;
      animation: pulse 1.5s ease-in-out infinite;
    }

    @keyframes pulse {
      0% { box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.4); }
      70% { box-shadow: 0 0 0 20px rgba(239, 68, 68, 0); }
      100% { box-shadow: 0 0 0 0 rgba(239, 68, 68, 0); }
    }

    .secondary-btn {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.05);
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: rgba(255, 255, 255, 0.6);
      font-size: 20px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.3s ease;
    }

    .secondary-btn:hover {
      background: rgba(255, 255, 255, 0.1);
      color: #fff;
    }

    /* 对话记录面板 */
    .conversation-panel {
      position: fixed;
      top: 0;
      right: -400px;
      width: 400px;
      height: 100vh;
      background: rgba(0, 0, 0, 0.9);
      backdrop-filter: blur(20px);
      border-left: 1px solid rgba(255, 255, 255, 0.1);
      transition: right 0.3s ease;
      z-index: 15;
      display: flex;
      flex-direction: column;
    }

    .conversation-panel.open {
      right: 0;
    }

    .panel-header {
      padding: 20px;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .panel-title {
      font-size: 18px;
      font-weight: 600;
    }

    .close-panel {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.1);
      border: none;
      color: rgba(255, 255, 255, 0.8);
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.2s ease;
    }

    .close-panel:hover {
      background: rgba(255, 255, 255, 0.2);
    }

    .conversation-list {
      flex: 1;
      overflow-y: auto;
      padding: 20px;
    }

    .conversation-item {
      margin-bottom: 16px;
      padding: 12px;
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .conversation-role {
      font-size: 12px;
      color: rgba(255, 255, 255, 0.6);
      margin-bottom: 4px;
    }

    .conversation-text {
      font-size: 14px;
      color: rgba(255, 255, 255, 0.9);
      line-height: 1.5;
    }

    /* 快捷输入区 */
    .quick-input {
      position: fixed;
      bottom: 30px;
      left: 50%;
      transform: translateX(-50%);
      width: 90%;
      max-width: 600px;
      background: rgba(255, 255, 255, 0.05);
      backdrop-filter: blur(20px);
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 30px;
      padding: 15px 25px;
      display: flex;
      align-items: center;
      gap: 15px;
      opacity: 0;
      transform: translateX(-50%) translateY(100px);
      transition: all 0.3s ease;
      z-index: 10;
    }

    .quick-input.visible {
      opacity: 1;
      transform: translateX(-50%) translateY(0);
    }

    .quick-input input {
      flex: 1;
      background: none;
      border: none;
      color: #fff;
      font-size: 16px;
      outline: none;
    }

    .quick-input input::placeholder {
      color: rgba(255, 255, 255, 0.4);
    }

    .send-btn {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      background: #3b82f6;
      border: none;
      color: #fff;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.2s ease;
    }

    .send-btn:hover {
      background: #2563eb;
      transform: scale(1.05);
    }

    /* 响应式设计 */
    @media (max-width: 768px) {
      .conversation-panel {
        width: 100%;
        right: -100%;
      }

      .voice-orb {
        width: 150px;
        height: 150px;
      }

      .orb-core {
        width: 100px;
        height: 100px;
      }

      .spectrum-visualizer {
        width: 250px;
      }
    }
  </style>
</head>
<body>
  <div id="app">
    <!-- 动态背景 -->
    <div class="dynamic-background">
      <div class="bg-gradient"></div>
    </div>

    <!-- 顶部栏 -->
    <div class="top-bar">
      <h1 class="app-title">文物领域智能语音助手</h1>
      <div class="top-actions">
        <button class="action-btn" id="dbStatus" title="数据库连接状态">
          <i class="fas fa-database"></i>
        </button>
        <button class="action-btn" id="ttsToggle" title="语音播报">
          <i class="fas fa-volume-up"></i>
        </button>
        <button class="action-btn" id="historyToggle" title="对话记录">
          <i class="fas fa-comments"></i>
        </button>
        <button class="action-btn" id="settingsBtn" title="设置">
          <i class="fas fa-cog"></i>
        </button>
      </div>
    </div>

    <!-- 主要语音助手区域 -->
    <div class="voice-assistant-container">
      <!-- 语音助手动画 -->
      <div class="voice-orb" id="voiceOrb">
        <div class="orb-core" id="orbCore"></div>
        <div class="voice-wave" id="voiceWave">
          <div class="wave-ring"></div>
          <div class="wave-ring"></div>
          <div class="wave-ring"></div>
        </div>
        
        <!-- 频谱可视化 -->
        <div class="spectrum-visualizer" id="spectrumVisualizer">
          <!-- 动态生成频谱条 -->
        </div>
      </div>

      <!-- 状态文字 -->
      <div class="status-text" id="statusText">准备就绪，点击开始对话</div>

      <!-- 主控制按钮 -->
      <div class="main-control">
        <button class="secondary-btn" id="keyboardBtn" title="键盘输入">
          <i class="fas fa-keyboard"></i>
        </button>
        
        <button class="voice-button" id="voiceBtn">
          <i class="fas fa-microphone"></i>
        </button>
        
        <button class="secondary-btn" id="clearBtn" title="清除对话">
          <i class="fas fa-trash"></i>
        </button>
      </div>
    </div>

    <!-- 对话记录面板 -->
    <div class="conversation-panel" id="conversationPanel">
      <div class="panel-header">
        <h2 class="panel-title">对话记录</h2>
        <button class="close-panel" id="closePanelBtn">
          <i class="fas fa-times"></i>
        </button>
      </div>
      <div class="conversation-list" id="conversationList">
        <!-- 动态生成对话记录 -->
      </div>
    </div>

    <!-- 快捷输入区 -->
    <div class="quick-input" id="quickInput">
      <input type="text" id="textInput" placeholder="输入您的问题..." />
      <button class="send-btn" id="sendBtn">
        <i class="fas fa-paper-plane"></i>
      </button>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/dompurify/dist/purify.min.js"></script>
  
  <script>
    // Vue 应用
    new Vue({
      el: '#app',
      data: {
        // API 配置
        apiBaseUrl: 'http://localhost:3000/api/data',
        aiApiUrl: 'http://210.27.197.62:11434/api/chat',
        llmModel: 'deepseek-r1:32b',
        
        // 状态
        isListening: false,
        isSpeaking: false,
        isThinking: false,
        isConnected: false,
        isTTSEnabled: true,
        showHistory: false,
        showQuickInput: false,
        
        // 语音相关
        speechRecognition: null,
        speechSynthesis: null,
        currentUtterance: null,
        voices: [],
        selectedVoiceURI: null,
        
        // 对话数据
        conversations: [],
        currentTranscript: '',
        
        // UI 元素
        statusText: '准备就绪，点击开始对话',
        
        // 频谱动画
        spectrumBars: [],
        animationFrameId: null
      },
      
      mounted() {
        this.initializeApp();
        this.createSpectrumBars();
        this.bindEvents();
      },
      
      methods: {
        // 初始化应用
        initializeApp() {
          // 初始化 TTS
          if ('speechSynthesis' in window) {
            this.speechSynthesis = window.speechSynthesis;
            this.loadVoices();
            if (this.speechSynthesis.onvoiceschanged !== undefined) {
              this.speechSynthesis.onvoiceschanged = () => this.loadVoices();
            }
          }
          
          // 初始化 STT
          if ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) {
            const SpeechRecognitionAPI = window.SpeechRecognition || window.webkitSpeechRecognition;
            this.speechRecognition = new SpeechRecognitionAPI();
            this.speechRecognition.continuous = false;
            this.speechRecognition.interimResults = true;
            this.speechRecognition.lang = 'zh-CN';
            
            this.speechRecognition.onstart = () => this.onSpeechStart();
            this.speechRecognition.onresult = (event) => this.onSpeechResult(event);
            this.speechRecognition.onerror = (event) => this.onSpeechError(event);
            this.speechRecognition.onend = () => this.onSpeechEnd();
          }
          
          // 测试数据库连接
          this.testDatabaseConnection();
        },
        
        // 创建频谱条
        createSpectrumBars() {
          const visualizer = document.getElementById('spectrumVisualizer');
          for (let i = 0; i < 30; i++) {
            const bar = document.createElement('div');
            bar.className = 'spectrum-bar';
            bar.style.height = '5px';
            visualizer.appendChild(bar);
            this.spectrumBars.push(bar);
          }
        },
        
        // 绑定事件
        bindEvents() {
          // 主语音按钮
          document.getElementById('voiceBtn').addEventListener('click', () => {
            this.toggleListening();
          });
          
          // 键盘输入按钮
          document.getElementById('keyboardBtn').addEventListener('click', () => {
            this.showQuickInput = !this.showQuickInput;
            document.getElementById('quickInput').classList.toggle('visible');
            if (this.showQuickInput) {
              document.getElementById('textInput').focus();
            }
          });
          
          // 历史记录按钮
          document.getElementById('historyToggle').addEventListener('click', () => {
            this.showHistory = !this.showHistory;
            document.getElementById('conversationPanel').classList.toggle('open');
          });
          
          // 关闭历史记录
          document.getElementById('closePanelBtn').addEventListener('click', () => {
            this.showHistory = false;
            document.getElementById('conversationPanel').classList.remove('open');
          });
          
          // TTS 开关
          document.getElementById('ttsToggle').addEventListener('click', () => {
            this.isTTSEnabled = !this.isTTSEnabled;
            document.getElementById('ttsToggle').classList.toggle('active');
          });
          
          // 清除对话
          document.getElementById('clearBtn').addEventListener('click', () => {
            if (confirm('确定要清除所有对话记录吗？')) {
              this.conversations = [];
              this.updateConversationList();
            }
          });
          
          // 文本输入
          document.getElementById('textInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
              this.sendTextMessage();
            }
          });
          
          document.getElementById('sendBtn').addEventListener('click', () => {
            this.sendTextMessage();
          });
        },
        
        // 切换语音监听
        toggleListening() {
          if (this.isListening) {
            this.speechRecognition.stop();
          } else {
            if (this.speechSynthesis && this.speechSynthesis.speaking) {
              this.speechSynthesis.cancel();
            }
            try {
              this.speechRecognition.start();
            } catch (e) {
              console.error('无法启动语音识别:', e);
              this.updateStatus('无法启动语音识别，请检查麦克风权限');
            }
          }
        },
        
        // 语音识别事件处理
        onSpeechStart() {
          this.isListening = true;
          this.updateOrbState('listening');
          this.updateStatus('正在聆听...');
          this.startSpectrumAnimation();
          
          // 更新按钮
          const voiceBtn = document.getElementById('voiceBtn');
          voiceBtn.classList.add('active');
          voiceBtn.innerHTML = '<i class="fas fa-stop"></i>';
        },
        
        onSpeechResult(event) {
          let finalTranscript = '';
          let interimTranscript = '';
          
          for (let i = event.resultIndex; i < event.results.length; i++) {
            const transcript = event.results[i][0].transcript;
            if (event.results[i].isFinal) {
              finalTranscript += transcript;
            } else {
              interimTranscript += transcript;
            }
          }
          
          if (interimTranscript) {
            this.updateStatus(`正在聆听: ${interimTranscript}`);
          }
          
          if (finalTranscript) {
            this.currentTranscript = finalTranscript;
          }
        },
        
        onSpeechError(event) {
          console.error('语音识别错误:', event.error);
          this.isListening = false;
          this.updateOrbState('idle');
          this.updateStatus(`语音识别出错: ${event.error}`);
          this.stopSpectrumAnimation();
          this.resetVoiceButton();
        },
        
        onSpeechEnd() {
          this.isListening = false;
          this.stopSpectrumAnimation();
          this.resetVoiceButton();
          
          if (this.currentTranscript) {
            this.processUserInput(this.currentTranscript);
            this.currentTranscript = '';
          } else {
            this.updateOrbState('idle');
            this.updateStatus('准备就绪，点击开始对话');
          }
        },
        
        // 发送文本消息
        sendTextMessage() {
          const input = document.getElementById('textInput');
          const text = input.value.trim();
          if (text) {
            this.processUserInput(text);
            input.value = '';
            this.showQuickInput = false;
            document.getElementById('quickInput').classList.remove('visible');
          }
        },
        
        // 处理用户输入
        async processUserInput(text) {
          // 添加用户消息到对话记录
          this.addConversation('user', text);
          
          // 更新状态
          this.updateOrbState('thinking');
          this.updateStatus('思考中...');
          this.isThinking = true;
          
          try {
            // 提取实体
            const entities = await this.extractEntities(text);
            
            // 查询知识图谱
            let knowledgeContext = '';
            if (entities.length > 0 && this.isConnected) {
              const kgResult = await this.queryKnowledgeGraph(entities[0].name);
              if (kgResult) {
                knowledgeContext = this.formatKnowledgeGraphResults(kgResult);
              }
            }
            
            // 生成回答
            const response = await this.generateResponse(text, knowledgeContext);
            
            // 添加助手回答到对话记录
            this.addConversation('assistant', response);
            
            // TTS 播报
            if (this.isTTSEnabled) {
              this.speakText(response);
            } else {
              this.updateOrbState('idle');
              this.updateStatus('回答完成');
            }
            
          } catch (error) {
            console.error('处理消息时出错:', error);
            this.updateStatus('抱歉，处理您的请求时遇到了问题');
            this.updateOrbState('idle');
            this.isThinking = false;
          }
        },
        
        // 提取实体
        async extractEntities(text) {
          const prompt = `
任务：请从以下用户问题中，精准地提取出最核心的名词性实体。
用户问题："${text}"
只输出 JSON 格式：
{
  "entities": ["实体1", "实体2"]
}`;
          
          try {
            const response = await axios.post(this.aiApiUrl, {
              model: this.llmModel,
              messages: [{ role: 'user', content: prompt }],
              stream: false
            });
            
            const data = JSON.parse(response.data.message.content);
            return data.entities.map(name => ({ name: name.trim() }));
          } catch (error) {
            console.error('实体提取失败:', error);
            return [];
          }
        },
        
        // 查询知识图谱
        async queryKnowledgeGraph(entityName) {
          try {
            const response = await axios.get(`${this.apiBaseUrl}/${encodeURIComponent(entityName)}`);
            if (response.data && Object.keys(response.data).length > 0) {
              return response.data;
            }
          } catch (error) {
            console.error('知识图谱查询失败:', error);
          }
          return null;
        },
        
        // 格式化知识图谱结果
        formatKnowledgeGraphResults(data) {
          let context = '【知识图谱信息】:\n';
          
          if (Array.isArray(data)) {
            data.forEach(item => {
              if (item.node1) context += `- ${item.node1.name}\n`;
              if (item.relationship) context += `  关系: ${item.relationship}\n`;
              if (item.node2) context += `  关联: ${item.node2.name}\n`;
            });
          } else if (data.name) {
            context += `实体: ${data.name}\n`;
            Object.entries(data).forEach(([key, value]) => {
              if (key !== 'name' && key !== 'embedding') {
                context += `${key}: ${value}\n`;
              }
            });
          }
          
          return context;
        },
        
        // 生成回答
        async generateResponse(userMessage, knowledgeContext) {
          const prompt = knowledgeContext ? 
            `基于以下知识图谱信息回答用户问题。
${knowledgeContext}
用户问题："${userMessage}"
请直接给出简洁的回答。` :
            `请回答用户问题："${userMessage}"`;
          
          try {
            const response = await axios.post(this.aiApiUrl, {
              model: this.llmModel,
              messages: [{ role: 'user', content: prompt }],
              stream: false
            });
            
            return response.data.message.content;
          } catch (error) {
            console.error('生成回答失败:', error);
            return '抱歉，我在生成回答时遇到了问题。';
          }
        },
        
        // TTS 播报
        speakText(text) {
          if (!this.speechSynthesis || !text) return;
          
          // 清理文本
          const cleanText = text.replace(/[*#`\[\]]/g, '').trim();
          
          this.currentUtterance = new SpeechSynthesisUtterance(cleanText);
          this.currentUtterance.lang = 'zh-CN';
          
          if (this.selectedVoiceURI) {
            const voice = this.voices.find(v => v.voiceURI === this.selectedVoiceURI);
            if (voice) this.currentUtterance.voice = voice;
          }
          
          this.currentUtterance.onstart = () => {
            this.isSpeaking = true;
            this.updateOrbState('speaking');
            this.updateStatus('正在回答...');
          };
          
          this.currentUtterance.onend = () => {
            this.isSpeaking = false;
            this.updateOrbState('idle');
            this.updateStatus('回答完成，点击继续对话');
          };
          
          this.currentUtterance.onerror = () => {
            this.isSpeaking = false;
            this.updateOrbState('idle');
            this.updateStatus('语音播报出错');
          };
          
          this.speechSynthesis.speak(this.currentUtterance);
        },
        
        // 加载语音
        loadVoices() {
          if (!this.speechSynthesis) return;
          this.voices = this.speechSynthesis.getVoices();
          const zhVoice = this.voices.find(voice => voice.lang.startsWith('zh-CN'));
          if (zhVoice) {
            this.selectedVoiceURI = zhVoice.voiceURI;
          }
        },
        
        // 更新助手状态
        updateOrbState(state) {
          const orbCore = document.getElementById('orbCore');
          const voiceWave = document.getElementById('voiceWave');
          
          orbCore.className = 'orb-core';
          voiceWave.className = 'voice-wave';
          
          if (state !== 'idle') {
            orbCore.classList.add(state);
            voiceWave.classList.add(state);
          }
        },
        
        // 更新状态文字
        updateStatus(text) {
          this.statusText = text;
          document.getElementById('statusText').textContent = text;
        },
        
        // 添加对话记录
        addConversation(role, content) {
          const conversation = {
            role: role,
            content: content,
            timestamp: new Date()
          };
          
          this.conversations.push(conversation);
          this.updateConversationList();
        },
        
        // 更新对话列表
        updateConversationList() {
          const list = document.getElementById('conversationList');
          list.innerHTML = '';
          
          this.conversations.forEach(conv => {
            const item = document.createElement('div');
            item.className = 'conversation-item';
            
            const roleDiv = document.createElement('div');
            roleDiv.className = 'conversation-role';
            roleDiv.textContent = conv.role === 'user' ? '您' : '助手';
            
            const textDiv = document.createElement('div');
            textDiv.className = 'conversation-text';
            textDiv.textContent = conv.content;
            
            item.appendChild(roleDiv);
            item.appendChild(textDiv);
            list.appendChild(item);
          });
          
          list.scrollTop = list.scrollHeight;
        },
        
        // 测试数据库连接
        async testDatabaseConnection() {
          try {
            const response = await axios.get(this.apiBaseUrl, { timeout: 5000 });
            if (response.status === 200) {
              this.isConnected = true;
              document.getElementById('dbStatus').classList.add('active');
            }
          } catch (error) {
            this.isConnected = false;
            document.getElementById('dbStatus').classList.remove('active');
          }
        },
        
        // 频谱动画
        startSpectrumAnimation() {
          const animate = () => {
            this.spectrumBars.forEach(bar => {
              const height = Math.random() * 60 + 5;
              bar.style.height = `${height}px`;
            });
            this.animationFrameId = requestAnimationFrame(animate);
          };
          
          document.getElementById('spectrumVisualizer').classList.add('active');
          animate();
        },
        
        stopSpectrumAnimation() {
          if (this.animationFrameId) {
            cancelAnimationFrame(this.animationFrameId);
          }
          document.getElementById('spectrumVisualizer').classList.remove('active');
          this.spectrumBars.forEach(bar => {
            bar.style.height = '5px';
          });
        },
        
        // 重置语音按钮
        resetVoiceButton() {
          const voiceBtn = document.getElementById('voiceBtn');
          voiceBtn.classList.remove('active');
          voiceBtn.innerHTML = '<i class="fas fa-microphone"></i>';
        }
      }
    });
  </script>
</body>
</html>